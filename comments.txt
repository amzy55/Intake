
//float Entity::DistancePlayerEnemy(Entity* enemy, Tmpl8::vec2 TileMapOffset)
//{
//	//float distancePlayerEnemy = sqrtf(powf(player->GetPosition().x - (enemy->GetPosition().x - TileMapOffset.x), 2) + powf(player->GetPosition().y - (enemy->GetPosition().y - TileMapOffset.y), 2));
//
//	Tmpl8::vec2 playerPos = m_position;
//	Tmpl8::vec2 enemyPos = enemy->GetPosition(TileMapOffset);
//	float distancePlayerEnemy = (playerPos - enemyPos).length();
//
//	return distancePlayerEnemy;
//}
		
/*if (distancePlayerEnemy < SNOW_TILE.width * 3)
{
	if (distancePlayerEnemy < SNOW_TILE.width)
	{
		vec2 enemyNewPos = { static_cast<float>(IRand(800)), static_cast<float>(IRand(512)) };
		enemy->SetPosition(enemyNewPos);
	}

	if (EnemyPos.x < PlayerPos.x)
		enemyMoveBy.x += enemySpeed * deltaTime;

	if (EnemyPos.x > PlayerPos.x)
		enemyMoveBy.x -= enemySpeed * deltaTime;

	if (EnemyPos.y < PlayerPos.y)
		enemyMoveBy.y += enemySpeed * deltaTime;

	if (EnemyPos.y > PlayerPos.y)
		enemyMoveBy.y -= enemySpeed * deltaTime;

	enemy->Move(enemyMoveBy);
}*/

//vec2 playerUpperLeft = playerPos - (TILE_SIZE * player->GetAnchor());
//vec2 playerBottomRight = playerPos + (TILE_SIZE * player->GetAnchor());
//Bounds playerBounds(playerUpperLeft, playerBottomRight);
//Pixel BarColorChosen = BarColor[1];
//if (tileMap->Collides(playerBounds))
//	BarColorChosen = BarColor[0];
//	//player->SetPosition({ Rand(screen->GetWidth()), Rand(screen->GetHeight()) });


//float halfPlayerSize = (playerBounds.max.x - playerBounds.min.x) / 2.0f;
//vec2 playerMin = { playerPos.x - halfPlayerSize, playerPos.y - halfPlayerSize };
//vec2 playerMax = { playerPos.x + halfPlayerSize, playerPos.y + halfPlayerSize };

//for (auto iter = tilesBounds.begin(); iter != tilesBounds.end();)
//{
//	if ((newPlayerBounds.max.y < (*iter).min.y) || (newPlayerBounds.min.y < (*iter).max.y))
//		moveTileMap.y = 0;

//	else if ((newPlayerBounds.max.x > (*iter).min.x) || (newPlayerBounds.min.x < (*iter).max.x))
//		moveTileMap.x = 0;
//}

		bool canMoveHorizontal = true;
		bool canMoveVertical = true;

			for (auto& collidingTile : tilesBounds)
			{
				if (newPlayerBounds.min.x < (collidingTile.min.x + collidingTile.Width()))
				{
					canMoveHorizontal = false;
					input.left = false;
				}
				if ((newPlayerBounds.min.x + newPlayerBounds.Width()) > collidingTile.min.x)
				{
					input.right = false;
					canMoveHorizontal = false;
				}
				if (newPlayerBounds.min.y < (collidingTile.min.y + collidingTile.Height()))
				{
					canMoveVertical = false;
					input.up = false;
				}
				if ((newPlayerBounds.Height() + newPlayerBounds.min.y) > collidingTile.min.y)
				{
					input.down = false;
					canMoveVertical = false;
				}
			}

			if (canMoveVertical == false)
				moveTileMap.y = 0;
			if (canMoveHorizontal == false)
				moveTileMap.x = 0;

	//float distancePlayerEnemy = sqrtf(powf(other->GetPosition().x - (enemy->GetPosition().x - TileMapOffset.x), 2) + powf(other->GetPosition().y - (enemy->GetPosition().y - TileMapOffset.y), 2));
